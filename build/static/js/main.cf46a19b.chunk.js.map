{"version":3,"sources":["logo.png","components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","VerticalDividers","class","icon","faClock","size","Grid","container","alignItems","styles","justifyContent","alignContent","style","transformStyle","src","logo","transform","href","faTwitter","faFacebook","faInstagram","faLinkedin","faLevelUpAlt","Divider","orientation","id","flexItem","margin","padding","border","background","display","type","faArrowRight","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,+TCa1B,SAASC,IAEtB,OACA,yBAAKC,MAAM,aACT,yBAAKA,MAAM,UACT,yBAAKA,MAAM,aAEb,yBAAKA,MAAM,SAAQ,kBAAC,IAAD,CAAiBC,KAAMC,IAASC,KAAK,QAC1D,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,WAAW,SAASC,OAAQ,CAACC,eAAgB,SAAUC,aAAc,WACjF,yBAAKT,MAAM,QACX,kBAAC,IAAD,CAAMU,MAAO,CAACC,eAAgB,gBAC9B,yBAAKX,MAAM,OAAOY,IAAKC,IAAMH,MAAO,CAACI,UAAW,uBAEhD,yBAAKd,MAAM,UACT,uBAAGA,MAAM,OAAOe,KAAK,uBAAsB,kBAAC,IAAD,CAAiBd,KAAMe,IAAWb,KAAK,QAClF,uBAAGH,MAAM,OAAOe,KAAK,wBAAuB,kBAAC,IAAD,CAAiBd,KAAMgB,IAAYd,KAAK,QACpF,uBAAGH,MAAM,OAAOe,KAAK,yBAAwB,kBAAC,IAAD,CAAiBd,KAAMiB,IAAaf,KAAK,QACtF,uBAAGH,MAAM,OAAOe,KAAK,wBAAuB,kBAAC,IAAD,CAAiBd,KAAMkB,IAAYhB,KAAK,OAApF,MAEF,uBAAGH,MAAM,SAAT,gBACA,kBAAC,IAAD,CAAiBC,KAAMmB,QAEvB,kBAACC,EAAA,EAAD,CAASC,YAAY,WAAWC,GAAG,UAAUC,UAAQ,EAAEd,MAAO,CAAEe,OAAQ,IAAKC,QAAS,IAAKC,OAAQ,oBAAqBC,WAAY,aACpI,yBAAK5B,MAAM,WACT,wBAAIA,MAAM,cAAV,oBACA,wBAAIA,MAAM,eAAV,eACA,yBAAKA,MAAM,aACT,uBAAGA,MAAM,WAAT,wEACA,yBAAKA,MAAM,QAAQU,MAAO,CAACmB,QAAS,SACpC,2BAAOC,KAAK,UACV,gCAAQ,uBAAGf,KAAK,yBAAR,cAA2C,kBAAC,IAAD,CAAiBd,KAAM8B,a,ICrCnEC,E,uKAEjB,OACE,6BACE,kBAAC,EAAD,W,GAJyBC,aCMbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cf46a19b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3debeca4.png\";","import React from 'react';\r\nimport Tilt from 'react-parallax-tilt';\r\nimport logo from '../logo.png';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport '../styles/clock.css';\r\nimport '../styles/grid.css';\r\nimport '../styles/responsive.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faClock, faArrowRight, faLevelUpAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport {faInstagram, faFacebook, faTwitter, faLinkedin} from '@fortawesome/free-brands-svg-icons';\r\n\r\n \r\n  export default function VerticalDividers() {\r\n\r\n    return (\r\n    <div class=\"container\">\r\n      <div class=\"header\">\r\n        <div class=\"overlay\"></div>\r\n      </div>\r\n      <div class=\"clock\"><FontAwesomeIcon icon={faClock} size=\"2x\" /></div>\r\n    <Grid container alignItems=\"center\" styles={{justifyContent: \"center\", alignContent: \"center\"}}>\r\n        <div class=\"left\">\r\n        <Tilt style={{transformStyle: \"preserve-3d\"}}>\r\n        <img class=\"logo\" src={logo} style={{transform: \"translateZ(20px)\"}} />\r\n        </Tilt>\r\n        <div class=\"social\">\r\n          <a class=\"icon\" href=\"https://twitter.com\"><FontAwesomeIcon icon={faTwitter} size=\"2x\" /></a>\r\n          <a class=\"icon\" href=\"https://facebook.com\"><FontAwesomeIcon icon={faFacebook} size=\"2x\" /></a>\r\n          <a class=\"icon\" href=\"https://instagram.com\"><FontAwesomeIcon icon={faInstagram} size=\"2x\" /></a>\r\n          <a class=\"icon\" href=\"https://linkedin.com\"><FontAwesomeIcon icon={faLinkedin} size=\"2x\" /> </a>\r\n        </div>\r\n        <p class=\"stalk\">Stalk Us Here\r\n        <FontAwesomeIcon icon={faLevelUpAlt} /></p>\r\n        </div>\r\n        <Divider orientation=\"vertical\" id=\"divider\" flexItem  style={{ margin: \"0\", padding: \"0\", border: \"2px solid #E17A2A\", background: \"#E17A2A\"}} />\r\n        <div class=\"content\">\r\n          <h2 class=\"subheading\">Brace Yourselves</h2>\r\n          <h1 class=\"mainheading\">INCOMING!!!</h1>\r\n          <div class=\"paragraph\">\r\n            <p class=\"tagline\">The platform that India's youth has been waiting for is almost here.</p>\r\n            <div class=\"email\" style={{display: \"flex\"}} >\r\n            <input type=\"email\"\r\n            /><button><a href=\"mailto:name@email.com\">Contact Us <FontAwesomeIcon icon={faArrowRight} /></a></button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    </Grid>\r\n    </div>\r\n    );\r\n  }","import React , { Component } from \"react\";\r\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n//import { faClock } from '@fortawesome/free-solid-svg-icons';\r\nimport VerticalDivider from './components/Grid';\r\n//import { Button, Divider, Grid, Segment } from 'semantic-ui-react';\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <VerticalDivider />\r\n      </div>\r\n    )\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}